ext {
    // find sdkRoot in configs
    var root = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT") ?: project.parent.ext.local?.jvm?.home
    sdkRoot = (root == null ? null : new File(root))

    dexFile = project.parent.ext.child(project.buildDir, "dex.jar")
    var ua = project.parent.ext.local?.build?.buildAndroid
    useandroid = ((ua == null) || ua)
    project.logger.info "build android dex: $project.ext.useandroid"
}

// collect classes and dex jars
project.tasks.create("collectJars", Jar) { Jar jar ->
    jar.archiveFileName = project.parent.ext.getOutputJar(project)

    // combine dex and classes jars
    jar.from {
        project.ext.useandroid ? [project.zipTree(project.tasks.jar.archiveFile.get()), project.zipTree(dexFile)] :
                [project.zipTree(project.tasks.jar.archiveFile.get())]
    }

    jar.finalizedBy project.tasks.copyJar

    // gradle issue
    project.parent.tasks.buildRelease.mustRunAfter jar
}

// create dex jar
project.tasks.create("dex") { Task task ->
    // create dex jar
    task.doLast {
        // delete previous dex jar
        if (dexFile.exists())
            project.delete dexFile

        println project.ext.useandroid

        if (project.ext.useandroid) {
            // find d8 and android.jar locations
            if (project.ext.sdkRoot == null || !project.ext.sdkRoot.exists())
                throw new GradleException("No Android SDK found.")
            var platformRoot = project.parent.ext.child(sdkRoot, "platforms").listFiles().find { File file ->
                project.parent.ext.child(file, "android.jar").exists()
            }
            String d8Name = System.getenv("OS") == "Windows_NT" ? "d8.bat" : "d8"
            var buildToolsRoot = project.parent.ext.child(sdkRoot, "build-tools").listFiles().find { File file ->
                project.parent.ext.child(file, d8Name).exists()
            }

            if (!platformRoot || !buildToolsRoot)
                throw new GradleException("" +
                        (!platformRoot ? "No android.jar found. Ensure that you have an Android platform installed." : "") +
                        (!buildToolsRoot ? "No $d8Name found. Ensure that you have an Android build tools installed." : ""))

            // collect all classpath
            var classpath = (configurations.compileClasspath.asList()
                    + configurations.runtimeClasspath.asList()
                    + project.parent.ext.child(platformRoot, "android.jar"))
            var dependencies = ""
            for (path in classpath) {
                dependencies += "--classpath $path.absolutePath "
            }

            // run d8
            project.parent.ext.doExec(
                    "$buildToolsRoot/$d8Name $dependencies ${project.tasks.jar.archiveFile.get()}" +
                            " --min-api 14 --output $dexFile.absolutePath")
        }
    }

    task.finalizedBy project.tasks.collectJars
}

// create classes jar
project.tasks.jar { Jar jar ->
    jar.archiveFileName = "classes.jar"

    println "build android $project.ext.useandroid"

    jar.finalizedBy project.tasks.dex
}